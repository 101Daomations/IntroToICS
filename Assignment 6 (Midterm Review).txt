1) What is the output of the code below?
a = [1, 4, "hello", {}]
b = [None, 2, 5, 6, 7]
print(len(a))
print(len(b))

a) 4 5    b) 3 4   c) 3 5   d) 2 4


2) What TYPE of object does this function return?
Note: a and b are integers
def func1(a, b)
    return a, b

a) Tuple  b) List  c) Integer  d) None


3) List the similarities and differences between these data structures: Lists, Tuples, Dictionaries


4) State the object's type at each index of the list myList

a = [1, 2]
b = {1, 2}

myList = [{1: "Hello"}, a, [3, 4], b]

type(myList[0]) =
type(myList[1]) =
type(myList[2]) =
type(myList[3]) =


5) What is the output of the following code below?
myList = [{1: "Hello"}, a, [3, 4], b]

print(myList[0][1])


6) What makes a named tuple different from a data structures like lists/dictionaries/sets/tuples?
   How do you make a named tuple?


7) Make 3 test cases for the addAssignment function making sure to cover all edge cases
the addAssignment function takes in an assignment and will add it to the assignment list if the assignment is
valid. Nothing will be added if the assignment is invalid


assignments = []

def addAssignment(assignment):
    ....

